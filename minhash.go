/*
Package mhsig provides functions for computing and comparing MinHash
signatures for bulk (as opposed to streaming) data.  For
probabilistic data structures that process streaming data
confer https:// github.com/dgrisky/go-minhash and
https://github.com/tylertreat/BoomFilters. The former package inspires
many of the implementation details of the present one.

MinHash signatures can be used to estimate the Jaccard index
J(A, B) := |A & B| / |A || B| of two sets that are subsets
of some finite, totally ordered set U.  If s is a permutation
of U chosen uniformly at random, then x := argmin s(A || B) is
just a random element chosen uniformly from A || B.  It's
clear that P(x in A & B) = J(A, B).  Since min s(A) = min s(B)
if and only if x is in A & B, we have just shown that
P(min s(A) = min S(B)) = J(A, B).

The central idea of minhash signatures is to repeatedly perform
the above experiment with different permutations as a way to estimate
the underlying probability
J(A, B) = P(an element x in A || B is also  in A & B).

A length k minhash signature S(A) is theoretically generated by randomly
choosing k permutations si (i=1, ..., k) in the symmetric group of U
(group of bijective endofunctions on U) and computing  hi(A) := min si(A)
for each permutation.  We take S(A) := [h1(A), ..., hk(A)].
Since each permutation is a bijection, min si(A) = min si(B) if and
only if argmin si(A) = argmin si(B) and so we could just as
well use these argmins, which is sometimes how the signature S(A) is
defined.

Specifying permutations for large U is not efficient, and so we often
take a family of integer-valued hash functions that are minwise
independent, in the sense that for most sets A,
min h(A) ! = min g(A) for two distinct hash functions in the family.
Frequently this family is parametrically  generated.

For more information,
    http://research.neustar.biz/2012/07/09/sketch-of-the-day-k-minimum-values/

    MinHashing:
    http://infolab.stanford.edu/~ullman/mmds/ch3.pdf
    https://en.wikipedia.org/wiki/MinHash

    BottomK:
    http://www.math.tau.ac.il/~haimk/papers/p225-cohen.pdf
    http://cohenwang.org/edith/Papers/metrics394-cohen.pdf

    http://www.mpi-inf.mpg.de/~rgemulla/publications/beyer07distinct.pdf

This package works best when provided with a strong 64-bit hash function,
such as CityHash, Spooky, Murmur3, or SipHash.

*/

package mhsig

import (
	"math"
)

const (
	MaxUint  uint   = ^uint(0)
	MaxInt   int    = int(MaxUint >> 1)
	infinity uint64 = math.MaxUint64
)

type Hash64Func func([]byte) uint64

// Signature is an integer array representing the signature of a set.
type Signature []uint64
type futureSignature chan Signature

// Set is a representation of a set after some bit encoding.
type Set [][]byte

// MinHash is an a data structure that computes and compares signatures.
type MinHash interface {
	// Sketch computes a signature for a set.
	Sketch(Set) Signature

	// Similarity computes the similarity between two MinHash signatures.
	// The method for computing similarity depends on whether a MinWise
	// or Bottom-K implementation is used.
	Similarity(Signature) float64
}

// EstimateIntersection estimates the cardinality of the intersection
// between two sets provided their sizes and Jaccard similarity are known.
func EstimateIntersection(js float64, size1, size2 int) int {
	var est int
	if js == 0 {
		est = 0
	} else {
		est = math.Floor((size1 + size2) / ((1.0 / js) + 1))
	}
	return est
}

// If n, m, i, u denote |A|, |B|, |A & B|, and |A || B| respectively,
// then given that A and B are not disjoint (i != 0), w have
// J := J(A, B) = i / u which is equivalent to
// 1/J = u / i = (n + m - i) / i = (n + m / i) - 1.
// Solving for i yields |A & B| = (n + m) / ((1/J)+ 1).
// Thus an estimate for the Jaccard index of A and B yields an estimate
// for the size of their intersection, provided we know the sizes of A and B.
