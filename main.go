/*
Package minhash provides probabilistic data structures for computing
MinHash signatures for streaming data.

The reader should also conf https://github.com/dgryski/go-minhash and
https://github.com/tylertreat/BoomFilters.  In fact, most of the
implementation details of this package are based off the former.

MinHash signatures can be used to estimate the Jaccard index
J(A, B) := |A & B| / |A || B| of two sets that are subsets
of some finite, totally ordered set U.  If s is a permutation
of U chosen uniformly at random, then x := argmin s(A || B) is
just a random element chosen uniformly from A || B.  It's
clear that P(x in A & B) = J(A, B).  Since min s(A) = min s(B)
if and only if x is in A & B, we have just shown that
P(min s(A) = min S(B)) = J(A, B).

The central idea of minhash signatures is to repeatedly perform
the above experiment with different permutations as a way to estimate
the underlying probability
J(A, B) = P(an element x in A || B is also  in A & B).

A length k minhash signature S(A) is theoretically generated by randomly
choosing k permutations si (i=1, ..., k) in the symmetric group of U
(group of bijective endofunctions on U) and computing  hi(A) := min si(A)
for each permutation.  We take S(A) := [h1(A), ..., hk(A)].
Since each permutation is a bijection, min si(A) = min si(B) if and
only if argmin si(A) = argmin si(B) and so we could just as
well use these argmins, which is sometimes how the signature S(A) is
defined.

Specifying permutations for large U is not efficient, and so we often
take a family of integer-valued hash functions that are minwise
independent, in the sense that for most sets A,
min h(A) ! = min g(A) for two distinct hash functions in the family.
Frequently this family is parametrically  generated.

For more information,
    http://research.neustar.biz/2012/07/09/sketch-of-the-day-k-minimum-values/

    MinHashing:
    http://infolab.stanford.edu/~ullman/mmds/ch3.pdf
    https://en.wikipedia.org/wiki/MinHash

    BottomK:
    http://www.math.tau.ac.il/~haimk/papers/p225-cohen.pdf
    http://cohenwang.org/edith/Papers/metrics394-cohen.pdf

    http://www.mpi-inf.mpg.de/~rgemulla/publications/beyer07distinct.pdf

This package works best when provided with a strong 64-bit hash function,
such as CityHash, Spooky, Murmur3, or SipHash.

*/

package minhash

type HashFunc func([]byte) uint64

// Interface is an a probabilistic data structure used to
// compute a similarity preserving signature for a set.  It ingests
// a stream of the set's elements and continuously updates the signature.
type Interface interface {
	// Signature returns the signature itself.
	Signature() []uint64
}

// MinHashSimilarity computes an estimate for the
// Jaccard similarity of two sets given their MinHash signatures.
func Similarity(x, y Interface) float64 {
	return similarity(x.Signature(), y.Signature())
}

func IsEmpty(m Interface) bool {
	var empty = true

	if m != nil {
		// Check whether each minimum is infinite.
		for _, v := range m.Signature() {
			if v < infinity {
				empty = false
				break
			}
		}
	}
	return empty
}
